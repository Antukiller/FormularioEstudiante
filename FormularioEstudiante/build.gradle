plugins {
  id 'java'
  id 'application'
  id 'org.jetbrains.kotlin.jvm' version '1.9.23'
  id 'org.javamodularity.moduleplugin' version '1.8.12'
  id 'org.openjfx.javafxplugin' version '0.0.14' // Actualizado
  id 'org.beryx.jlink' version '2.25.0'
  id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.23'
  id 'jacoco'
}

group 'dev.antoine'
version '1.0-SNAPSHOT'

repositories {
  mavenCentral()
}

ext {
  junitVersion = '5.10.0'
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

application {
  mainModule = 'dev.antoine.formularioestudiante'
  mainClass = 'dev.antoine.formularioestudiante.FormularioApplication'
}

kotlin {
  jvmToolchain(21)
}

javafx {
  version = '21'
  modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
  // Logger
  implementation("org.lighthousegames:logging:1.3.0")
  implementation("ch.qos.logback:logback-classic:1.4.14")

  // Base de datos
  implementation("com.h2database:h2:2.3.232")

  // JDBI
  implementation("org.jetbrains.kotlin:kotlin-reflect")
  implementation("org.jdbi:jdbi3-core:3.48.0")
  implementation("org.jdbi:jdbi3-sqlobject:3.48.0")
  implementation("org.jdbi:jdbi3-kotlin:3.48.0")
  implementation("org.jdbi:jdbi3-kotlin-sqlobject:3.48.0")
  implementation("org.jetbrains.kotlin:kotlin-stdlib")

  // Kotlin Serialization
  implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")

  // Result
  implementation("com.michael-bull.kotlin-result:kotlin-result:2.0.0")

  // Open Browser
  implementation("com.vaadin:open:8.5.0.4")

  // Cache Caffeine
  implementation("com.github.ben-manes.caffeine:caffeine:3.2.0")

  // Koin
  implementation(platform("io.insert-koin:koin-bom:3.5.6"))
  implementation("io.insert-koin:koin-core")

  // Test
  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
  testImplementation("org.mockito.kotlin:mockito-kotlin:5.3.1")
  testImplementation("org.mockito:mockito-junit-jupiter:5.12.0")

  // Jacoco
  implementation("org.jacoco:org.jacoco.core:0.8.12")
  testImplementation("org.jetbrains.kotlin:kotlin-test:1.9.23")
  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1")
}

test {
  useJUnitPlatform()
  finalizedBy(tasks.jacocoTestReport)
}

jlink {
  imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
  options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
  launcher {
    name = 'app'
  }
}

jlinkZip {
  group = 'distribution'
}

// Jar ejecutable
jar {
  manifest {
    attributes 'Main-Class': 'dev.antoine.formularioestudiante.FormularioApplication'
  }
  from {
    configurations["runtimeClasspath"].collect { it.isDirectory() ? it : zipTree(it) }
  }
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

jacocoTestReport {
  dependsOn test

  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }

  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: ["**/model/**", "**/exceptions/**", "**/*Main*.*"])
    }))
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        minimum = 0.8
      }
    }
  }
}

task testCoverage(group: 'verification', description: 'Runs the unit tests with coverage') {
  dependsOn test, jacocoTestReport, jacocoTestCoverageVerification
}
